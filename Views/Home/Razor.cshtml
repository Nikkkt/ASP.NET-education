@{
    ViewData["Title"] = "Razor";
}

<div class="text-center">
    <img class="title_image" src="/img/asp.net.png" alt="ASP logo" />
    <h1 class="display-4">Синтаксис Razor</h1>
</div>

<p>
    Синтаксис Razor використовується для розштрення можливостей HTML 
</p>
<ul>
    <li>використання змінних та виразів</li>
    <li>умовні блоки (умовна верстка)</li>
    <li>циклічна верстка</li>
</ul>

<p>
    Основу складає символ <code>&commat;</code>, що обмежує використання цього символу у HTML, замість нього вживається сутність <code>@("&commat;")</code>
</p>

<h3>Вирази</h3>
<p>
    Результати виразів відображаються інструкцією <code>&commat;(2 + 2) = @(2 + 2)</code>
</p>

<h3>Інструкції</h3>
<p>
    Інструкції - конструкції, що не мають результату. Вони оформлюються у фігурних дужках на кшталт: <br/>
    <code>&commat;{ String str = "Hello world"; }</code>
    @{
        String str = "Hello world";
    }
</p>
<p>
    Змінні "видні" у всьому файлі-представленні, зокрема в іншому параграфі &commat;str = @str <br />
    Круглі дужки НЕ Є обов'язковими, вони потрібні тоді, коли межі виразу неоднозначні <br />
    <code>&commat;str + "!" = @str + "!"</code> - Неправильно <br />
    <code>&commat;(str + "!") = @(str + "!")</code> - Правильно <br />
    <code>&commat;str.Length + 1 = @str.Length + 1</code> <br />
    Винятки - Email адреси: user@gmail.com
</p>

<h3>Умовна та циклічна верстка</h3>
@{
    String[] arr = ["Дані 1", "Дані 2", "Дані 3", "Дані 4", "Дані 5"];
}
<p>
    Razor дозволяє комбінувати код та розмітку, причому сам намагається визначити де є що
</p>
@for (int i = 0; i < arr.Length; i++)
{
    int n = i + 1;
    <b>arr[@n] = @arr[i]</b>
    <br />
}
<p>
    Довжина масиву - число 
    @if(arr.Length % 2 == 0)
    {
        <span><b>Парне</b></span>
    }
    else
    {
        <span><b>Непарне</b></span>
    }
</p>