@{
    ViewData["Title"] = "Ioc";
}

<div class="text-center">
    <img class="title_image" src="/img/asp.net.png" alt="ASP logo" />
    <h1 class="display-4">Інверсія управління (IoC, inversion of control)</h1>
</div>

<p>
    Інверсія управління - це схема (патерн) проєктування, згідно з яким управління життєвим циклом об'єктів перекладається на архітектурний елемент - інжектор або контейнер служб
</p>
<p>
    Замість традиційної схеми, за якої кожен об'єкт сам створює всі необхідні для своєї роботи залежності (інші об'єкти), у схемі IoC об'єкти "запитують" у контейнера необхідні елементи - інжектує їх
</p>
<ul>
    <li>Створюємо місце для служб - папку Services</li>
    <li>За принципом DIP (з SOLID) служби слід впроваджувати через інтерфейси, відповідно одна служба - це щонайменше два файли, тому для кожної служби також бажано створювати папки (Hash)</li>
    <li>Створюємо інтерфейс для служби IHashService</li>
    <li>Створюємо клас - інплементацію інтерфейсу (Md5HashService)</li>
    <li>Реєструємо службу у Program.cs (див. коментарі у Program.cs)</li>
    <li>Інжектуємо службу у контролері (див. коментарі у HomeController.cs)</li>
</ul>
<ul>
    <li>Створюємо ще один клас - ShaHashService</li>
    <li>Замінюємо клас в інструкції реєстрації сервісу (Program.cs)</li>
</ul>
<p>
    hash = @ViewData["hash"]
</p>

<h3>Домашнє завдання №2</h3>
<p>
    password = @ViewData["password"]
</p>